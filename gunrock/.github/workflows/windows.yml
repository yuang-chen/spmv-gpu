# Gunrock/Essentials Windows Workflow
name: Windows

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master and dev branch
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/
    if: "!contains(github.event.commits[0].message, '[skip windows]')"
    runs-on: windows-2019

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Fetch CUDA toolkit using Jimver/cuda-toolkit
      - name: Fetch CUDA toolkit
        uses: Jimver/cuda-toolkit@v0.2.8
        id: cuda-toolkit
        with:
          cuda: '11.7.0'
          linux-local-args: '["--toolkit"]'

      # Runs a single command using the runners shell
      - name: Check nvcc version
        run: nvcc -V
        
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Configure cmake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -D ESSENTIALS_BUILD_TESTS=ON #-DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} 
      
      # See issue: https://github.com/NVIDIA/thrust/issues/1328
      # And... https://github.com/gunrock/essentials/issues/92
      - name: Remove CUB symbolic link
        run: rm ${{github.workspace}}/externals/thrust-src/cub
        
      - name: Build all applications
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build # --verbose # --target sssp
        
        # TODO: Use the following once we have BUILD_TYPE and envrionment variables set-up:
        # run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
